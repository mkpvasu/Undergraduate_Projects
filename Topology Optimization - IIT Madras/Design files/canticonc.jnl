# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openIges('G:/Intern Works/Sai/CANTILEVER.IGS', msbo=False, scaleFromFile=
    OFF, trimCurve=DEFAULT)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, convertToAnalytical=1
    , dimensionality=THREE_D, geometryFile=mdb.acis, name='CANTILEVER', 
    stitchEdges=1, stitchTolerance=1.0, type=DEFORMABLE_BODY)
mdb.models['Model-1'].Material(name='steel')
mdb.models['Model-1'].materials['steel'].Elastic(table=((200000000000.0, 0.28), 
    ))
mdb.models['Model-1'].HomogeneousSolidSection(material='steel', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['CANTILEVER'].Set(cells=
    mdb.models['Model-1'].parts['CANTILEVER'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='cantiset')
mdb.models['Model-1'].parts['CANTILEVER'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['CANTILEVER'].sets['cantiset'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='CANTILEVER-1', 
    part=mdb.models['Model-1'].parts['CANTILEVER'])
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['CANTILEVER-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ), name='fixedbc')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'fixedload', region=mdb.models['Model-1'].rootAssembly.sets['fixedbc'], u1=
    0.0, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].TabularAmplitude(data=((0.0, 0.0), (1.0, 1.0)), name=
    'Amp-1', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].rootAssembly.Surface(name='loadsur', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['CANTILEVER-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude='Amp-1', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=1000.0, name='load', region=
    mdb.models['Model-1'].rootAssembly.surfaces['loadsur'])
mdb.models['Model-1'].parts['CANTILEVER'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['CANTILEVER'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].TopologyTask(name='cantitopo', region=MODEL)
mdb.models['Model-1'].optimizationTasks['cantitopo'].SingleTermDesignResponse(
    drivingRegion=None, identifier='STRAIN_ENERGY', name='strainenergy', 
    operation=SUM, region=MODEL, stepOptions=())
mdb.models['Model-1'].optimizationTasks['cantitopo'].SingleTermDesignResponse(
    drivingRegion=None, identifier='VOLUME', name='volume', operation=SUM, 
    region=MODEL, stepOptions=())
mdb.models['Model-1'].optimizationTasks['cantitopo'].ObjectiveFunction(name=
    'straine', objectives=((OFF, 'strainenergy', 1.0, 0.0, ''), ))
mdb.models['Model-1'].optimizationTasks['cantitopo'].OptimizationConstraint(
    designResponse='volume', name='volconst', restrictionMethod=
    RELATIVE_LESS_THAN_EQUAL, restrictionValue=0.25)
mdb.OptimizationProcess(dataSaveFrequency=OPT_DATASAVE_SPECIFY_CYCLE, 
    description='', maxDesignCycle=30, model='Model-1', name='cantiopt', 
    odbMergeFrequency=2, prototypeJob='cantiopt-Job', task='cantitopo')
mdb.optimizationProcesses['cantiopt'].Job(atTime=None, getMemoryFromAnalysis=
    True, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    multiprocessingMode=DEFAULT, name='cantiopt-Job', numCpus=1, numGPUs=0, 
    queue=None, waitHours=0, waitMinutes=0)
mdb.optimizationProcesses['cantiopt'].submit()
mdb.optimizationProcesses['cantiopt']._Message(STARTED, {
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                ___ ___ __  __ _   _ _    ___   _                         |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |               / __|_ _|  \\/  | | | | |  |_ _| /_\\                        |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |               \\__ \\| || |\\/| | |_| | |__ | | / _ \\                       |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |               |___/___|_|  |_|\\___/|____|___/_/ \\_\\                      |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                     _______                                              |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                    |__   __|                                             |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                       | | ___  ___  ___ __ _                             |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                       | |/ _ \\/ __|/ __/ _` |                            |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                       | | (_) \\__ \\ (_| (_| |                            |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                       |_|\\___/|___/\\___\\__,_|                            |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |            _____ _                   _                                   |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |           / ____| |                 | |                                  |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |          | (___ | |_ _ __ _   _  ___| |_ _   _ _ __ ___                  |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |           \\___ \\| __| "__| | | |/ __| __| | | | "__/ _ \\                 |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |           ____) | |_| |  | |_| | (__| |_| |_| | | |  __/                 |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |          |_____/ \\__|_|   \\__,_|\\___|\\__|\\__,_|_|  \\___|                 |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |    PERL execution control                                                |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |    Version 3DEXPERIENCE R2017x                                           |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' |    Copyright (c) 2016 Dassault Systemes Simulia Corp.                    |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Logfile: cantiopt\\TOSCA.OUT', 'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' | Starting jobname: "cantiopt"                                             |', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure pre-processor', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 0', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 33756, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:43:39 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 0', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 1', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 28920, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:43:55 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 1', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 2', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 31004, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:44:11 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 2', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 3', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 30232, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:44:26 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 3', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 4', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 31864, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:44:42 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 4', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 5', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 30992, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:44:58 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 5', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 6', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 27044, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:45:13 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 6', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 7', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 33732, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:45:29 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 7', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 8', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 18628, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:45:45 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 8', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 9', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 20968, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:46:00 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 9', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 10', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 33084, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:46:16 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 10', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 11', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 27044, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:46:32 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 11', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 12', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 21552, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:46:48 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 12', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 13', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 30140, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:47:03 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 13', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 14', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 30768, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:47:19 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 14', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 15', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 27792, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:47:35 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 15', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 16', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 10548, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:47:50 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 16', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 17', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 20172, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:48:06 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 17', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 18', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 19056, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:48:22 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 18', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 19', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 3324, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:48:38 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 19', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 20', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 31264, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:48:53 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 20', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 21', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 19436, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:49:09 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 21', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 22', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 20324, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:49:23 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 22', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 23', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 32608, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:49:39 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 23', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 24', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 13620, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:49:54 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 24', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 25', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 22788, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:50:10 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 25', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 26', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 24588, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:50:25 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 26', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 27', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 19016, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:50:41 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 27', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 28', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 27044, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:50:57 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 28', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 29', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 32320, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:51:10 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 29', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 30', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 'file': 'C:\\temp\\cantiopt\\cantiopt-Job.odb', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 'handle': 13620, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'cantiopt-Job', 
    'memory': 27.0})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(ODB_FRAME, 
    {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'cantiopt-Job', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(COMPLETED, 
    {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt'].jobs['cantiopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 15:51:26 2018', 
    'jobName': 'cantiopt-Job'})
mdb.optimizationProcesses['cantiopt']._archiveJob(jobName='cantiopt-Job')
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 30', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Generating REPORT input file: cantiopt\\cantiopt_post.par', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure.report module', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(STATUS, {
    'message': ' SIMULIA Tosca Structure ended successfully', 
    'jobName': 'cantiopt'})
mdb.optimizationProcesses['cantiopt']._Message(COMPLETED, {
    'time': 'Mon Jun 25 15:51:34 2018', 'jobName': 'cantiopt'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].loads['load']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.6, name='__profile__', 
    sheetSize=64.03, transform=
    mdb.models['Model-1'].parts['CANTILEVER'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['CANTILEVER'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['CANTILEVER'].edges[1], 
    sketchOrientation=RIGHT, origin=(100.0, 12.5, 10.0)))
mdb.models['Model-1'].parts['CANTILEVER'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(1.6, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-1.6, 0.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.6, name='__profile__', 
    sheetSize=64.03, transform=
    mdb.models['Model-1'].parts['CANTILEVER'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['CANTILEVER'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['CANTILEVER'].edges[1], 
    sketchOrientation=RIGHT, origin=(100.0, 12.5, 10.0)))
mdb.models['Model-1'].parts['CANTILEVER'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-1.6, 1.6), 
    point2=(1.6, -1.6))
mdb.models['Model-1'].parts['CANTILEVER'].SolidExtrude(depth=1.0, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['CANTILEVER'].faces[0], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['CANTILEVER'].edges[1])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].parts['CANTILEVER'].features['Solid extrude-1']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.6, name='__profile__', 
    sheetSize=64.03, transform=
    mdb.models['Model-1'].parts['CANTILEVER'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['CANTILEVER'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['CANTILEVER'].edges[1], 
    sketchOrientation=RIGHT, origin=(100.0, 12.5, 10.0)))
mdb.models['Model-1'].parts['CANTILEVER'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 12.5), point2=(
    0.0, -12.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-10.0, 0.0), point2=
    (10.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7])
mdb.models['Model-1'].parts['CANTILEVER'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['CANTILEVER'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['Model-1'].parts['CANTILEVER'].edges[1])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='loadset', vertices=
    mdb.models['Model-1'].rootAssembly.instances['CANTILEVER-1'].vertices.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(amplitude='Amp-1', cf2=-1000.0, 
    createStepName='Step-1', distributionType=UNIFORM, field='', localCsys=None
    , name='load', region=mdb.models['Model-1'].rootAssembly.sets['loadset'])
mdb.optimizationProcesses.changeKey(fromName='cantiopt', toName='canticoncopt')
mdb.models['Model-1'].parts['CANTILEVER'].generateMesh()
# Save by Muni Kumar lamborg on 2018_06_25-16.01.02; build 2017 2016_09_28-03.24.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.optimizationProcesses['canticoncopt'].submit()
mdb.optimizationProcesses['canticoncopt']._Message(STARTED, {
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                ___ ___ __  __ _   _ _    ___   _                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               / __|_ _|  \\/  | | | | |  |_ _| /_\\                        |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               \\__ \\| || |\\/| | |_| | |__ | | / _ \\                       |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               |___/___|_|  |_|\\___/|____|___/_/ \\_\\                      |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                     _______                                              |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                    |__   __|                                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | ___  ___  ___ __ _                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | |/ _ \\/ __|/ __/ _` |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | (_) \\__ \\ (_| (_| |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       |_|\\___/|___/\\___\\__,_|                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |            _____ _                   _                                   |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           / ____| |                 | |                                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          | (___ | |_ _ __ _   _  ___| |_ _   _ _ __ ___                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           \\___ \\| __| "__| | | |/ __| __| | | | "__/ _ \\                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           ____) | |_| |  | |_| | (__| |_| |_| | | |  __/                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          |_____/ \\__|_|   \\__,_|\\___|\\__|\\__,_|_|  \\___|                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    PERL execution control                                                |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Version 3DEXPERIENCE R2017x                                           |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Copyright (c) 2016 Dassault Systemes Simulia Corp.                    |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Logfile: canticoncopt\\TOSCA.OUT', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' | Starting jobname: "canticoncopt"                                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure pre-processor', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 0', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33772, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:01:25 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 0', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 1', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 21004, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:01:41 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 1', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 2', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 27856, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:01:57 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 2', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 3', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 17624, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:02:13 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 3', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 4', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 24532, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:02:29 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 4', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 5', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 31120, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:02:44 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 5', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 6', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 28068, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:03:01 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 6', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 7', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 23708, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:03:17 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 7', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 8', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 3232, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:03:33 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 8', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 9', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 31680, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:03:48 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 9', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 10', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 25948, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:04:04 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 10', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 11', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 27528, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:04:20 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 11', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 12', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 18420, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:04:36 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 12', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 13', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33456, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:04:52 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 13', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 14', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 32600, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:05:08 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 14', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 15', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 24644, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:05:24 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 15', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 16', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 20544, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:05:39 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 16', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 17', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 24308, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:05:55 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 17', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 18', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 25492, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:06:11 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 18', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 19', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 25612, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:06:27 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 19', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 20', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 23016, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:06:43 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 20', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 21', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 25120, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:06:59 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 21', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 22', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 13948, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:07:14 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 22', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 23', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 22396, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:07:30 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 23', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 24', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 21932, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:07:46 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 24', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 25', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 24584, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:08:02 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 25', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 26', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 29236, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:08:18 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 26', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 27', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33168, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:08:34 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 27', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 28', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 9456, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:08:51 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 28', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 29', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 29576, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:09:07 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 29', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 30', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 31884, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 29.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:09:23 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 30', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Generating REPORT input file: canticoncopt\\canticoncopt_post.par', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure.report module', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' SIMULIA Tosca Structure ended successfully', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(COMPLETED, {
    'time': 'Mon Jun 25 16:09:29 2018', 'jobName': 'canticoncopt'})
mdb.models['Model-1'].parts['CANTILEVER'].deleteMesh()
mdb.models['Model-1'].parts['CANTILEVER'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.optimizationProcesses['canticoncopt'].submit()
mdb.optimizationProcesses['canticoncopt']._Message(STARTED, {
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                ___ ___ __  __ _   _ _    ___   _                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               / __|_ _|  \\/  | | | | |  |_ _| /_\\                        |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               \\__ \\| || |\\/| | |_| | |__ | | / _ \\                       |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               |___/___|_|  |_|\\___/|____|___/_/ \\_\\                      |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                     _______                                              |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                    |__   __|                                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | ___  ___  ___ __ _                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | |/ _ \\/ __|/ __/ _` |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | (_) \\__ \\ (_| (_| |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       |_|\\___/|___/\\___\\__,_|                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |            _____ _                   _                                   |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           / ____| |                 | |                                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          | (___ | |_ _ __ _   _  ___| |_ _   _ _ __ ___                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           \\___ \\| __| "__| | | |/ __| __| | | | "__/ _ \\                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           ____) | |_| |  | |_| | (__| |_| |_| | | |  __/                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          |_____/ \\__|_|   \\__,_|\\___|\\__|\\__,_|_|  \\___|                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    PERL execution control                                                |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Version 3DEXPERIENCE R2017x                                           |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Copyright (c) 2016 Dassault Systemes Simulia Corp.                    |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' The directory "canticoncopt" exists and will be deleted ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Logfile: canticoncopt\\TOSCA.OUT', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' | Starting jobname: "canticoncopt"                                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure pre-processor', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(WARNING, {
    'message': '  Model ONF file has no node data!', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(WARNING, {
    'message': '  Model ONF file has no element data!', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' **** SIMULIA Tosca Structure ERROR ****', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' Error reading input deck: canticoncopt-Job.inp', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' using the interface for ABAQUS.', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' Please make sure that the input deck is valid and', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' that the solver is correctly chosen.', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {'message': ' 111', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' | **** ERROR in SIMULIA Tosca Structure - module "SIMULIA Tosca Structure.pre" **** |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': '  SIMULIA Tosca Structure-preprocessor did not finish correctly. ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': '  Module call: "C:/SIMULIA/Tosca/2017/win_b64/code/bin/SMATsoToscaPrep.EXE" --loglevel INFO -i "C:\\temp\\canticoncopt\\canticoncopt.par"  ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': '  Return code: 111 ', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': ' Logfile: canticoncopt\\TOSCA.OUT', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ERROR, {
    'message': 'Optimization process failed with an error.', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(ABORTED, {
    'jobName': 'canticoncopt'})
mdb.models['Model-1'].parts['CANTILEVER'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.optimizationProcesses['canticoncopt'].submit()
mdb.optimizationProcesses['canticoncopt']._Message(STARTED, {
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                ___ ___ __  __ _   _ _    ___   _                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               / __|_ _|  \\/  | | | | |  |_ _| /_\\                        |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               \\__ \\| || |\\/| | |_| | |__ | | / _ \\                       |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |               |___/___|_|  |_|\\___/|____|___/_/ \\_\\                      |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                     _______                                              |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                    |__   __|                                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | ___  ___  ___ __ _                             |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | |/ _ \\/ __|/ __/ _` |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       | | (_) \\__ \\ (_| (_| |                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                       |_|\\___/|___/\\___\\__,_|                            |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |            _____ _                   _                                   |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           / ____| |                 | |                                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          | (___ | |_ _ __ _   _  ___| |_ _   _ _ __ ___                  |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           \\___ \\| __| "__| | | |/ __| __| | | | "__/ _ \\                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |           ____) | |_| |  | |_| | (__| |_| |_| | | |  __/                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |          |_____/ \\__|_|   \\__,_|\\___|\\__|\\__,_|_|  \\___|                 |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |                                                                          |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    PERL execution control                                                |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Version 3DEXPERIENCE R2017x                                           |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' |    Copyright (c) 2016 Dassault Systemes Simulia Corp.                    |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' The directory "canticoncopt" exists and will be deleted ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Logfile: canticoncopt\\TOSCA.OUT', 'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' | Starting jobname: "canticoncopt"                                         |', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': '  -------------------------------------------------------------------------- ', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure pre-processor', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 0', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 28920, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:11:35 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 0', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 1', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 19756, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:12:05 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 1', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 2', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 28684, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:12:33 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 2', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 3', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33232, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:13:02 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 3', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 4', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 15496, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:13:30 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 4', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 5', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33620, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:13:58 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 5', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 6', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 2376, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:14:26 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 6', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 7', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 13916, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:14:54 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 7', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 8', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 32244, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:15:22 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 8', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 9', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 18248, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:15:51 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 9', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 10', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 28484, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:16:17 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 10', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 11', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 30780, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:16:45 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 11', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 12', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 22452, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:17:13 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 12', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 13', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 25272, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:17:42 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 13', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 14', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 30736, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:18:10 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 14', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 15', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 12136, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:18:38 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 15', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 16', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 6892, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:19:06 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 16', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 17', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 30412, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:19:34 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 17', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 18', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 30004, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:20:02 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 18', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 19', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 29720, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:20:31 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 19', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 20', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 22772, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:20:59 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 20', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 21', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 30380, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:21:27 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 21', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 22', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 24936, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:21:56 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 22', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 23', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33324, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:22:24 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 23', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 24', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 32712, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:23:14 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 24', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 25', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33060, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:23:49 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 25', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 26', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 10884, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:24:41 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 26', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 27', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 34752, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:25:29 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 27', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 28', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 3088, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:26:00 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 28', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 29', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 31372, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:26:29 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 29', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting Abaqus analysis - design cycle 30', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 0, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER OP=NEW HAS BEEN MIXED WITH EITHER OP=ADD OR OP=REPLACE ON *OUTPUT REQUESTS.  OP=NEW IS ASSUMED FOR ALL *OUTPUT REQUESTS IN THIS STEP', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\canticoncopt\\canticoncopt-Job.odb', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STARTED, {'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-DFG6L0C', 
    'handle': 33956, 'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 'jobName': 'canticoncopt-Job', 
    'memory': 74.0})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 'physical_memory': 8074.0, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    MINIMUM_MEMORY, {'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    STATUS, {'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 
    'increment': 1, 'stepTime': 1.0, 'step': 1, 'jobName': 'canticoncopt-Job', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    COMPLETED, {'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt'].jobs['canticoncopt-Job']._Message(
    JOB_COMPLETED, {'time': 'Mon Jun 25 16:26:59 2018', 
    'jobName': 'canticoncopt-Job'})
mdb.optimizationProcesses['canticoncopt']._archiveJob(jobName=
    'canticoncopt-Job')
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure optimization module - design cycle 30', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Generating REPORT input file: canticoncopt\\canticoncopt_post.par', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' Starting SIMULIA Tosca Structure.report module', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(STATUS, {
    'message': ' SIMULIA Tosca Structure ended successfully', 
    'jobName': 'canticoncopt'})
mdb.optimizationProcesses['canticoncopt']._Message(COMPLETED, {
    'time': 'Mon Jun 25 16:27:09 2018', 'jobName': 'canticoncopt'})
# Save by Muni Kumar lamborg on 2018_06_25-16.32.19; build 2017 2016_09_28-03.24.59 126836
# Save by Muni Kumar lamborg on 2018_06_25-16.32.21; build 2017 2016_09_28-03.24.59 126836
# Save by Muni Kumar lamborg on 2018_06_25-17.17.48; build 2017 2016_09_28-03.24.59 126836
